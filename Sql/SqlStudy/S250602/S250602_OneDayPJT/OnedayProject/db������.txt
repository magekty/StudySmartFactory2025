drop database restaurant;


CREATE DATABASE restaurant;
USE restaurant;
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, 
    role ENUM('admin', 'staff') DEFAULT 'staff',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE restaurant_tables (
    table_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE 
);

CREATE TABLE menu (
    menu_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,0) NOT NULL
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    table_id INT NOT NULL,
    is_paid BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (table_id) REFERENCES restaurant_tables(table_id)
);

CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    menu_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,0) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (menu_id) REFERENCES menu(menu_id)
);

CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    total_amount DECIMAL(10,0),
    paid_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    table_number INT NOT NULL,
    order_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    details TEXT
);

SELECT * FROM restaurant.orders;









INSERT INTO users (username, password, role) VALUES 
('root', '1234', 'staff'),
('staff1', '1111', 'staff'),
('staff2', '2222', 'staff');


INSERT INTO restaurant_tables (name) VALUES 
('Table 1'), ('Table 2'), ('Table 3'),('Table 4');


INSERT INTO menu (name, price) VALUES 
('김치찌개', 8000),
('된장찌개', 7000),
('비빔밥', 9000),
('불고기', 12000),
('냉면', 7000);
INSERT INTO orders (table_id, is_paid) VALUES
(1, FALSE),  
(2, TRUE);   
INSERT INTO order_items (order_id, menu_id, quantity, price) VALUES
(1, 1, 2, 8000),  
(1, 3, 1, 9000),  
(2, 4, 1, 12000), 
(2, 5, 2, 7000);  
INSERT INTO payments (order_id, total_amount) VALUES
(2, 26000);  

-- 전체 누적
CREATE OR REPLACE VIEW v_total_sales_all AS
SELECT SUM(total_amount) AS total_sales
FROM payments;

-- 일별
CREATE OR REPLACE VIEW v_total_sales_daily AS
SELECT DATE(paid_time) AS sales_date,
       SUM(total_amount) AS total_sales
FROM payments
GROUP BY DATE(paid_time);

-- 월별
CREATE OR REPLACE VIEW v_total_sales_monthly AS
SELECT DATE_FORMAT(paid_time, '%Y-%m') AS sales_month,
       SUM(total_amount) AS total_sales
FROM payments
GROUP BY DATE_FORMAT(paid_time, '%Y-%m');

-- 결제 프로시저
DELIMITER $$
CREATE PROCEDURE pay_order(
    IN p_order_id INT,
    IN p_total_amount DECIMAL(10,0)
)BEGIN
    START TRANSACTION;
        INSERT INTO payments (order_id,total_amount)
        VALUES (p_order_id, p_total_amount);
        UPDATE orders
        SET is_paid = TRUE
        WHERE order_id = p_order_id;
    COMMIT;
END $$
DELIMITER ;

-- 결제취소 프로시저
DELIMITER $$
CREATE PROCEDURE cancel_payment(IN p_order_id INT)
BEGIN
    START TRANSACTION;
    UPDATE orders
      SET is_paid = FALSE
    WHERE order_id = p_order_id;
    DELETE FROM payments
    WHERE order_id = p_order_id;
    COMMIT;
END $$
DELIMITER ;

INSERT INTO menu (name, price) VALUES
('콜라', 1000), ('사이다', 1000), ('환타', 1000),
('치즈버거', 5000), ('불고기버거', 6000), ('치킨버거', 6500),
('감자튀김', 2500), ('치즈스틱', 1000), ('치킨너겟', 3000),
('소스추가', 500), ('시즈닝추가', 1000);


INSERT INTO orders (table_number, order_time, details)
VALUES (2, NOW(), '메뉴 A');

drop database restaurant;